@model DKMovies.Models.Concession
@{
    ViewData["Title"] = "Xóa sản phẩm - " + Model.Name;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="mb-4">
    <div class="d-flex align-items-center justify-content-between">
        <div>
            <h2 class="mb-1 fw-bold text-danger">
                <i class="fas fa-trash-alt text-danger me-2"></i>Xóa sản phẩm
            </h2>
            <p class="text-muted mb-0">Xác nhận xóa sản phẩm khỏi hệ thống</p>
        </div>
        <a asp-action="Index" class="btn btn-outline-secondary btn-sm">
            <i class="fas fa-arrow-left me-1"></i>Quay lại danh sách
        </a>
    </div>
</div>

<!-- Warning Alert -->
<div class="alert alert-danger border-0 shadow-sm mb-4" role="alert">
    <div class="d-flex align-items-center">
        <i class="fas fa-exclamation-triangle fa-2x me-3"></i>
        <div>
            <h5 class="alert-heading mb-1">Cảnh báo!</h5>
            <p class="mb-0">Bạn có chắc chắn muốn xóa sản phẩm này? Hành động này không thể hoàn tác.</p>
        </div>
    </div>
</div>

<div class="row g-4">
    <!-- Product Card -->
    <div class="col-lg-4">
        <div class="card border-danger shadow-sm">
            <div class="card-header bg-danger text-white py-3">
                <h5 class="card-title mb-0 fw-semibold">
                    <i class="fas fa-box me-2"></i>Thông tin sản phẩm
                </h5>
            </div>
            <div class="position-relative">
                <img src="@(!string.IsNullOrEmpty(Model.ImagePath) ? Model.ImagePath : "/images/default-concession.jpg")"
                     alt="@Model.Name"
                     class="card-img"
                     style="height: 250px; object-fit: cover; filter: grayscale(50%);"
                     onerror="this.src='/images/default-concession.jpg'" />

                <!-- Danger Overlay -->
                <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center"
                     style="background: rgba(220, 53, 69, 0.8);">
                    <div class="text-center text-white">
                        <i class="fas fa-trash-alt fa-3x mb-2"></i>
                        <div class="fw-bold">SẼ BỊ XÓA</div>
                    </div>
                </div>

                <!-- Category Badge -->
                <div class="position-absolute top-0 end-0 m-3">
                    <span class="badge @GetCategoryBadgeClass(Model.Category)">
                        <i class="@GetCategoryIcon(Model.Category) me-1"></i>
                        @Model.Category
                    </span>
                </div>
            </div>

            <div class="card-body text-center p-4">
                <h4 class="card-title fw-bold mb-2 text-danger">@Model.Name</h4>
                <div class="fs-4 fw-bold text-success mb-3">
                    @String.Format("{0:N0} ₫", Model.Price)
                </div>

                <div class="d-flex justify-content-center gap-2 mb-3">
                    <span class="badge @(Model.IsAvailable ? "bg-success" : "bg-danger")">
                        <i class="fas @(Model.IsAvailable ? "fa-check" : "fa-times") me-1"></i>
                        @(Model.IsAvailable ? "Đang bán" : "Ngưng bán")
                    </span>
                    @if (Model.StockQuantity <= 10)
                    {
                        <span class="badge bg-warning text-dark">
                            <i class="fas fa-exclamation-triangle me-1"></i>Sắp hết
                        </span>
                    }
                </div>

                <!-- Product Stats -->
                <div class="row g-2 text-center">
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-info mb-0">@Model.StockQuantity</h6>
                            <small class="text-muted">Tồn kho</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-warning mb-0">@GetSoldQuantity()</h6>
                            <small class="text-muted">Đã bán</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-success mb-0">@GetDaysActive()</h6>
                            <small class="text-muted">Ngày</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Details -->
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white border-bottom py-3">
                <h5 class="card-title mb-0 fw-semibold">
                    <i class="fas fa-info-circle text-info me-2"></i>Chi tiết sản phẩm sẽ bị xóa
                </h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label fw-medium text-muted">ID Sản phẩm:</label>
                        <div class="fw-bold">#@Model.ID</div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-medium text-muted">Tên sản phẩm:</label>
                        <div class="fw-bold">@Model.Name</div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-medium text-muted">Danh mục:</label>
                        <div class="fw-bold">@Model.Category</div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-medium text-muted">Giá bán:</label>
                        <div class="fw-bold text-success">@String.Format("{0:N0} VND", Model.Price)</div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-medium text-muted">Tồn kho:</label>
                        <div class="fw-bold">@Model.StockQuantity sản phẩm</div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-medium text-muted">Trạng thái:</label>
                        <div class="fw-bold">@(Model.IsAvailable ? "Đang bán" : "Ngưng bán")</div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-medium text-muted">Ngày tạo:</label>
                        <div class="fw-bold">@Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-medium text-muted">Thời gian tồn tại:</label>
                        <div class="fw-bold">@((DateTime.Now - Model.CreatedAt).Days) ngày</div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <div class="col-12">
                            <label class="form-label fw-medium text-muted">Mô tả:</label>
                            <div class="fw-bold">@Model.Description</div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.ImagePath))
                    {
                        <div class="col-12">
                            <label class="form-label fw-medium text-muted">Đường dẫn hình ảnh:</label>
                            <div class="fw-bold text-info">@Model.ImagePath</div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Impact Analysis -->
        <div class="card border-warning shadow-sm mt-4">
            <div class="card-header bg-warning text-dark py-3">
                <h5 class="card-title mb-0 fw-semibold">
                    <i class="fas fa-exclamation-triangle me-2"></i>Tác động khi xóa
                </h5>
            </div>
            <div class="card-body">
                @if (GetSoldQuantity() > 0 || HasActiveOrders())
                {
                    <div class="alert alert-danger" role="alert">
                        <h6 class="alert-heading">
                            <i class="fas fa-ban me-2"></i>Cảnh báo: Có dữ liệu liên quan!
                        </h6>
                        <p class="mb-0">Sản phẩm này có dữ liệu liên quan trong hệ thống:</p>
                        <ul class="mt-2 mb-0">
                            @if (GetSoldQuantity() > 0)
                            {
                                <li><strong>@GetSoldQuantity() sản phẩm đã bán</strong> - Lịch sử giao dịch</li>
                            }
                            @if (HasActiveOrders())
                            {
                                <li><strong>Đơn hàng đang xử lý</strong> - Có thể ảnh hưởng đến khách hàng</li>
                            }
                            @if (Model.StockQuantity > 0)
                            {
                                <li><strong>@Model.StockQuantity sản phẩm tồn kho</strong> - Giá trị hàng hóa</li>
                            }
                        </ul>
                    </div>
                }
                else
                {
                    <div class="alert alert-success" role="alert">
                        <h6 class="alert-heading">
                            <i class="fas fa-check-circle me-2"></i>Có thể xóa an toàn
                        </h6>
                        <p class="mb-0">Sản phẩm này chưa có dữ liệu liên quan nào trong hệ thống. Việc xóa sẽ không ảnh hưởng đến dữ liệu khác.</p>
                    </div>
                }

                <div class="alert alert-info" role="alert">
                    <h6 class="alert-heading">
                        <i class="fas fa-info-circle me-2"></i>Thông tin sẽ bị xóa vĩnh viễn
                    </h6>
                    <ul class="mb-0">
                        <li><strong>Thông tin sản phẩm</strong> - Tên, mô tả, giá bán</li>
                        <li><strong>Hình ảnh sản phẩm</strong> - File ảnh trên server (nếu có)</li>
                        <li><strong>Dữ liệu tồn kho</strong> - Số lượng và trạng thái bán hàng</li>
                        <li><strong>Cài đặt danh mục</strong> - Phân loại sản phẩm</li>
                        @if (GetSoldQuantity() > 0)
                        {
                            <li><strong>⚠️ Lưu ý:</strong> Lịch sử bán hàng sẽ bị ảnh hưởng</li>
                        }
                    </ul>
                </div>

                <div class="mt-3">
                    <h6 class="fw-bold mb-2">Thống kê tài chính:</h6>
                    <div class="row g-3">
                        <div class="col-md-4">
                            <div class="border rounded p-3 text-center">
                                <div class="text-muted small">Giá trị tồn kho</div>
                                <div class="fw-bold text-warning">@String.Format("{0:N0} ₫", Model.StockQuantity * Model.Price)</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="border rounded p-3 text-center">
                                <div class="text-muted small">Doanh thu ước tính</div>
                                <div class="fw-bold text-success">@String.Format("{0:N0} ₫", GetSoldQuantity() * Model.Price)</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="border rounded p-3 text-center">
                                <div class="text-muted small">Tổng giá trị</div>
                                <div class="fw-bold text-info">@String.Format("{0:N0} ₫", (Model.StockQuantity + GetSoldQuantity()) * Model.Price)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Action Buttons -->
<div class="row mt-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>Quay lại danh sách
            </a>
            <div class="d-flex gap-2">
                <a asp-action="Details" asp-route-id="@Model.ID" class="btn btn-outline-info">
                    <i class="fas fa-eye me-2"></i>Xem chi tiết
                </a>
                <a asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-outline-warning">
                    <i class="fas fa-edit me-2"></i>Chỉnh sửa thay vì xóa
                </a>
                @if (Model.IsAvailable)
                {
                    <button class="btn btn-outline-secondary" onclick="toggleAvailability()" title="Ngưng bán thay vì xóa">
                        <i class="fas fa-pause me-2"></i>Ngưng bán trước
                    </button>
                }
                <form asp-action="Delete" method="post" class="d-inline" onsubmit="return confirmDelete()">
                    <input asp-for="ID" type="hidden" />
                    <button type="submit" class="btn btn-danger" id="deleteBtn">
                        <i class="fas fa-trash me-2"></i>Xác nhận xóa
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Đồ uống" => "bg-info text-white",
            "Bắp rang" => "bg-warning text-dark",
            "Kẹo" => "bg-danger text-white",
            "Combo" => "bg-success text-white",
            "Đồ ăn nhanh" => "bg-primary text-white",
            _ => "bg-secondary text-white"
        };
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            "Đồ uống" => "fas fa-coffee",
            "Bắp rang" => "fas fa-seedling",
            "Kẹo" => "fas fa-candy-cane",
            "Combo" => "fas fa-box-open",
            "Đồ ăn nhanh" => "fas fa-hamburger",
            _ => "fas fa-utensils"
        };
    }

    private int GetSoldQuantity()
    {
        try
        {
            return Model.OrderItems?.Where(oi => oi.Order.Status == "COMPLETED").Sum(oi => oi.Quantity) ?? 0;
        }
        catch
        {
            return 0;
        }
    }

    private int GetDaysActive()
    {
        return (DateTime.Now - Model.CreatedAt).Days;
    }

    private bool HasActiveOrders()
    {
        try
        {
            return Model.OrderItems?.Any(oi => oi.Order.Status == "PENDING") ?? false;
        }
        catch
        {
            return false;
        }
    }
}

<style>
    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1) !important;
        }

    .border-danger {
        border-color: #dc3545 !important;
    }

    .btn {
        transition: all 0.3s ease;
    }

        .btn:hover:not(:disabled) {
            transform: translateY(-1px);
        }

    .alert {
        border: none;
        border-radius: 10px;
    }

    .card-img {
        transition: all 0.3s ease;
    }

    /* Danger pulse animation */
    .text-danger {
        animation: dangerPulse 2s infinite;
    }

    @keyframes dangerPulse {
        0%, 100%

    {
        opacity: 1;
    }

    50% {
        opacity: 0.7;
    }

    }

    /* Warning overlay */
    .position-absolute.top-0.start-0 {
        border-radius: 0 0 0.375rem 0.375rem;
    }

    @media (max-width: 768px) {
        .d-flex.justify-content-between

    {
        flex-direction: column;
        gap: 1rem;
    }

    .d-flex.justify-content-between .d-flex {
        justify-content: center;
    }

    .card-img {
        height: 200px !important;
    }

    }

    /* Financial stats highlighting */
    .border:hover {
        border-color: #dc3545 !important;
        transform: translateY(-2px);
        transition: all 0.3s ease;
    }

    /* Confirmation modal styles */
    .swal2-popup {
        border-radius: 15px;
    }

    .swal2-title {
        color: #dc3545;
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function confirmDelete() {
            event.preventDefault();

            const productName = '@Model.Name';
            const soldQuantity = @GetSoldQuantity();
            const stockValue = @(Model.StockQuantity * Model.Price);
            const hasActiveOrders = @HasActiveOrders().ToString().ToLower();

            let warningText = `Sản phẩm này có ${soldQuantity} đã bán và giá trị tồn kho ${stockValue.toLocaleString('vi-VN')} ₫.`;
            if (hasActiveOrders) {
                warningText += ' Có đơn hàng đang xử lý.';
            }

            Swal.fire({
                title: 'Xác nhận xóa sản phẩm?',
                html: `
                    <div class="text-start">
                        <p><strong>Sản phẩm:</strong> ${productName}</p>
                        <p><strong>ID:</strong> #@Model.ID</p>
                        <p class="text-warning"><i class="fas fa-exclamation-triangle me-2"></i>${warningText}</p>
                        <div class="alert alert-danger mt-3">
                            <small><strong>Để xác nhận:</strong> Nhập tên sản phẩm bên dưới</small>
                        </div>
                    </div>
                `,
                input: 'text',
                inputPlaceholder: 'Nhập: ' + productName,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Xóa vĩnh viễn',
                cancelButtonText: 'Hủy bỏ',
                reverseButtons: true,
                inputValidator: (value) => {
                    if (!value) {
                        return 'Vui lòng nhập tên sản phẩm để xác nhận'
                    }
                    if (value !== productName) {
                        return 'Tên sản phẩm không chính xác'
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading state
                    const deleteBtn = document.getElementById('deleteBtn');
                    deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang xóa...';
                    deleteBtn.disabled = true;

                    // Submit form
                    event.target.submit();
                }
            });

            return false;
        }

        async function toggleAvailability() {
            try {
                const response = await fetch('@Url.Action("ToggleAvailability", "AdminConcession")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({ concessionId: @Model.ID })
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        title: 'Thành công!',
                        text: result.message,
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(result.message || 'Có lỗi xảy ra');
                }
            } catch (error) {
                Swal.fire({
                    title: 'Lỗi!',
                    text: 'Có lỗi xảy ra khi cập nhật trạng thái',
                    icon: 'error'
                });
            }
        }

        // Add warning animations and effects
        document.addEventListener('DOMContentLoaded', function() {
            // Animate danger elements
            const dangerElements = document.querySelectorAll('.text-danger, .border-danger');
            dangerElements.forEach((el, index) => {
                setTimeout(() => {
                    el.style.animation = 'dangerPulse 2s infinite';
                }, index * 200);
            });

            // Show warning for high-value products
            const stockValue = @(Model.StockQuantity * Model.Price);
            const soldQuantity = @GetSoldQuantity();

            if (stockValue > 1000000 || soldQuantity > 50) {
                setTimeout(() => {
                    Swal.fire({
                        title: 'Cảnh báo giá trị cao',
                        text: 'Sản phẩm này có giá trị cao hoặc đã bán nhiều. Hãy cân nhắc kỹ trước khi xóa.',
                        icon: 'warning',
                        timer: 4000,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false
                    });
                }, 1000);
            }

            // Show notification if product is still available
            if (@Model.IsAvailable.ToString().ToLower()) {
                setTimeout(() => {
                    Swal.fire({
                        title: 'Lưu ý',
                        text: 'Sản phẩm này đang được bán. Khuyên bạn ngưng bán trước khi xóa.',
                        icon: 'info',
                        timer: 3000,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false
                    });
                }, 1500);
            }

            // Animate financial stats
            const statElements = document.querySelectorAll('.border .fw-bold');
            statElements.forEach((el, index) => {
                setTimeout(() => {
                    el.style.animation = 'countUp 1s ease-out forwards';
                }, index * 200);
            });
        });

        // Add count-up animation
        const style = document.createElement('style');
        style.textContent = `
        @keyframes countUp {
                from {
                    opacity: 0;
                    transform: translateY(20px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
        `;
        document.head.appendChild(style);
    </script>
}

@{
    Html.AntiForgeryToken();
}