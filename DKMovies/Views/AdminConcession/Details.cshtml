@model DKMovies.Models.Concession
@{
    ViewData["Title"] = "Chi tiết sản phẩm - " + Model.Name;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="mb-4">
    <div class="d-flex align-items-center justify-content-between">
        <div>
            <h2 class="mb-1 fw-bold text-dark">
                <i class="fas fa-box text-primary me-2"></i>Chi tiết sản phẩm
            </h2>
            <p class="text-muted mb-0">Thông tin chi tiết của @Model.Name</p>
        </div>
        <div class="d-flex gap-2">
            <a asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-warning btn-sm">
                <i class="fas fa-edit me-1"></i>Chỉnh sửa
            </a>
            <a asp-action="Delete" asp-route-id="@Model.ID" class="btn btn-danger btn-sm"
               onclick="return confirm('Bạn có chắc muốn xóa sản phẩm này?');">
                <i class="fas fa-trash-alt me-1"></i>Xóa
            </a>
            <a asp-action="Index" class="btn btn-outline-secondary btn-sm">
                <i class="fas fa-arrow-left me-1"></i>Quay lại
            </a>
        </div>
    </div>
</div>

<div class="row g-4">
    <!-- Product Image & Basic Info -->
    <div class="col-lg-4">
        <div class="card border-0 shadow-sm">
            <div class="position-relative">
                <img src="@(!string.IsNullOrEmpty(Model.ImagePath) ? Model.ImagePath : "/images/default-concession.jpg")"
                     alt="@Model.Name"
                     class="card-img-top"
                     style="height: 300px; object-fit: cover;"
                     onerror="this.src='/images/default-concession.jpg'" />

                <!-- Status Badge -->
                <div class="position-absolute top-0 start-0 m-3">
                    @if (!Model.IsActive)
                    {
                        <span class="badge bg-danger fs-6">
                            <i class="fas fa-times me-1"></i>Ngưng hoạt động
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-success fs-6">
                            <i class="fas fa-check me-1"></i>Hoạt động
                        </span>
                    }
                </div>

                <!-- Category Badge -->
                <div class="position-absolute top-0 end-0 m-3">
                    <span class="badge @GetCategoryBadgeClass(Model.Category) fs-6">
                        <i class="@GetCategoryIcon(Model.Category) me-1"></i>
                        @GetCategoryDisplayName(Model.Category)
                    </span>
                </div>

                <!-- Theater Count Badge -->
                <div class="position-absolute bottom-0 end-0 m-3">
                    <span class="badge bg-dark fs-6">
                        <i class="fas fa-building me-1"></i>@Model.TheaterConcessions.Count()
                    </span>
                </div>
            </div>

            <div class="card-body p-4">
                <h4 class="card-title fw-bold mb-2">@Model.Name</h4>

                @if (Model.TheaterConcessions.Any())
                {
                    <div class="fs-2 fw-bold text-success mb-3">
                        @Model.TheaterConcessions.Average(tc => tc.Price).ToString("N0") ₫
                    </div>
                    <small class="text-muted">Giá trung bình</small>
                }
                else
                {
                    <div class="fs-4 fw-bold text-muted mb-3">
                        Chưa có giá
                    </div>
                }

                <!-- Quick Actions -->
                <div class="d-grid gap-2 mt-3">
                    <button class="btn @(Model.IsActive ? "btn-outline-warning" : "btn-outline-success")"
                            onclick="toggleActiveStatus(@Model.ID, this)">
                        <i class="fas @(Model.IsActive ? "fa-pause" : "fa-play") me-2"></i>
                        @(Model.IsActive ? "Ngưng hoạt động" : "Kích hoạt")
                    </button>
                </div>

                <!-- Product Stats -->
                <div class="row g-2 text-center mt-3">
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-primary mb-0" id="theaterCount">@Model.TheaterConcessions.Count()</h6>
                            <small class="text-muted">Rạp áp dụng</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-warning mb-0" id="totalStock">@Model.TheaterConcessions.Sum(tc => tc.StockLeft)</h6>
                            <small class="text-muted">Tồn kho</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-info mb-0" id="avgPrice">
                                @if (Model.TheaterConcessions.Any())
                                {
                                    @Model.TheaterConcessions.Average(tc => tc.Price).ToString("N0")
                                }
                                else
                                {
                                    <text>0</text>
                                }
                            </h6>
                            <small class="text-muted">Giá TB (₫)</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Information -->
    <div class="col-lg-8">
        <!-- Basic Information -->
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white border-bottom py-3">
                <h5 class="card-title mb-0 fw-semibold">
                    <i class="fas fa-info-circle text-info me-2"></i>Thông tin sản phẩm
                </h5>
            </div>
            <div class="card-body p-4">
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-tag text-primary me-2"></i>
                                <strong>ID Sản phẩm</strong>
                            </div>
                            <div class="text-muted">#@Model.ID</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-layer-group text-success me-2"></i>
                                <strong>Danh mục</strong>
                            </div>
                            <div class="text-muted">@GetCategoryDisplayName(Model.Category)</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-toggle-on text-success me-2"></i>
                                <strong>Trạng thái</strong>
                            </div>
                            <div class="text-muted">
                                <span class="badge @(Model.IsActive ? "bg-success" : "bg-danger")">
                                    @(Model.IsActive ? "Hoạt động" : "Ngưng hoạt động")
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-building text-info me-2"></i>
                                <strong>Rạp áp dụng</strong>
                            </div>
                            <div class="text-muted">@Model.TheaterConcessions.Count() rạp</div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <div class="col-12">
                            <div class="border rounded p-3">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="fas fa-align-left text-dark me-2"></i>
                                    <strong>Mô tả</strong>
                                </div>
                                <div class="text-muted">@Model.Description</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Theater Concessions -->
        <div class="card border-0 shadow-sm mt-4">
            <div class="card-header bg-white border-bottom py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0 fw-semibold">
                        <i class="fas fa-store text-success me-2"></i>Thông tin theo rạp
                    </h5>
                    <span class="badge bg-light text-dark">@Model.TheaterConcessions.Count() rạp</span>
                </div>
            </div>
            <div class="card-body">
                @if (Model.TheaterConcessions.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover" id="theater-table">
                            <thead class="table-light">
                                <tr>
                                    <th>Rạp</th>
                                    <th>Vị trí</th>
                                    <th>Giá bán</th>
                                    <th>Tồn kho</th>
                                    <th>Trạng thái</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tc in Model.TheaterConcessions)
                                {
                                    <tr>
                                        <td>
                                            <div class="fw-medium">@tc.Theater.Name</div>
                                        </td>
                                        <td>
                                            <small class="text-muted">@tc.Theater.Location</small>
                                        </td>
                                        <td>
                                            <span class="fw-bold text-success">@tc.Price.ToString("N0") ₫</span>
                                        </td>
                                        <td>
                                            <span class="badge @(tc.StockLeft <= 10 ? "bg-warning text-dark" : "bg-info")">
                                                @tc.StockLeft
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @(tc.IsAvailable ? "bg-success" : "bg-danger")">
                                                @(tc.IsAvailable ? "Đang bán" : "Ngưng bán")
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn btn-outline-info btn-sm" onclick="viewTheaterDetails(@tc.TheaterID)">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-store text-muted fs-1 mb-3"></i>
                        <h5 class="text-muted">Chưa áp dụng tại rạp nào</h5>
                        <p class="text-muted mb-0">Sản phẩm này chưa được thiết lập giá bán và tồn kho tại bất kỳ rạp nào.</p>
                        <button class="btn btn-primary mt-3" onclick="addToTheater()">
                            <i class="fas fa-plus me-2"></i>Thêm vào rạp
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Action Buttons -->
<div class="row mt-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>Quay lại danh sách
            </a>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-info" onclick="printProductInfo()">
                    <i class="fas fa-print me-2"></i>In thông tin
                </button>
                <a asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-warning">
                    <i class="fas fa-edit me-2"></i>Chỉnh sửa
                </a>
                <button class="btn btn-outline-danger" onclick="toggleProductStatus(@Model.ID, @Model.IsActive.ToString().ToLower())">
                    <i class="fas fa-@(Model.IsActive ? "pause" : "play") me-2"></i>
                    @(Model.IsActive ? "Ngưng hoạt động" : "Kích hoạt")
                </button>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Food" => "bg-danger text-white",
            "Drink" => "bg-info text-white",
            "Combo" => "bg-success text-white",
            "Snack" => "bg-warning text-dark",
            "Dessert" => "bg-pink text-white",
            _ => "bg-secondary text-white"
        };
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            "Food" => "fas fa-utensils",
            "Drink" => "fas fa-coffee",
            "Combo" => "fas fa-box-open",
            "Snack" => "fas fa-cookie",
            "Dessert" => "fas fa-ice-cream",
            _ => "fas fa-question"
        };
    }

    private string GetCategoryDisplayName(string category)
    {
        return category switch
        {
            "Food" => "Đồ ăn",
            "Drink" => "Đồ uống",
            "Combo" => "Combo",
            "Snack" => "Snack",
            "Dessert" => "Tráng miệng",
            _ => "Khác"
        };
    }
}

<style>
    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1) !important;
        }

    .border:hover {
        border-color: #0d6efd !important;
        transform: translateY(-1px);
        transition: all 0.3s ease;
    }

    .bg-light:hover {
        background-color: #e9ecef !important;
        transform: translateY(-1px);
        transition: all 0.3s ease;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
    }

    .table td {
        vertical-align: middle;
    }

    .bg-pink {
        background-color: #e83e8c !important;
    }



    .d-flex.justify-content-between .d-flex {
        justify-content: center;
    }

    }


    .card {
        border: 1px solid #000 !important;
        box-shadow: none !important;
    }

    }
</style>

@section Scripts {
    <script>
        async function toggleActiveStatus(concessionId, button) {
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
            button.disabled = true;

            try {
                const response = await fetch('@Url.Action("ToggleActiveStatus", "AdminConcession")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({ concessionId: concessionId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    button.innerHTML = originalText;
                    showToast(result.message || 'Có lỗi xảy ra', 'error');
                }
            } catch (error) {
                button.innerHTML = originalText;
                showToast('Có lỗi xảy ra khi cập nhật trạng thái', 'error');
                console.error('Error:', error);
            } finally {
                button.disabled = false;
            }
        }

        async function toggleProductStatus(concessionId, currentStatus) {
            const action = currentStatus ? 'ngưng hoạt động' : 'kích hoạt';

            if (!confirm(`Bạn có chắc muốn ${action} sản phẩm này?`)) {
                return;
            }

            try {
                const response = await fetch('@Url.Action("ToggleActiveStatus", "AdminConcession")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({ concessionId: concessionId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Có lỗi xảy ra', 'error');
                }
            } catch (error) {
                showToast('Có lỗi xảy ra khi cập nhật trạng thái', 'error');
                console.error('Error:', error);
            }
        }

        function viewTheaterDetails(theaterId) {
            // Implement theater details view
            alert('Xem chi tiết rạp #' + theaterId);
        }

        function addToTheater() {
            // Implement add to theater functionality
            alert('Chức năng thêm vào rạp đang được phát triển');
        }

        function printProductInfo() {
            window.print();
        }

        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'success' ? 'success' : type === 'info' ? 'info' : 'danger'} position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check' : type === 'info' ? 'info' : 'exclamation-triangle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close ms-2" onclick="this.parentElement.remove()"></button>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 3000);
        }
    </script>
}

@{
    Html.AntiForgeryToken();
}