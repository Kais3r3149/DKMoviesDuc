@model DKMovies.Models.Concession
@{
    ViewData["Title"] = "Chi tiết sản phẩm - " + Model.Name;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="mb-4">
    <div class="d-flex align-items-center justify-content-between">
        <div>
            <h2 class="mb-1 fw-bold text-dark">
                <i class="fas fa-box text-primary me-2"></i>Chi tiết sản phẩm
            </h2>
            <p class="text-muted mb-0">Thông tin chi tiết và doanh số của @Model.Name</p>
        </div>
        <div class="d-flex gap-2">
            <a asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-warning btn-sm">
                <i class="fas fa-edit me-1"></i>Chỉnh sửa
            </a>
            <a asp-action="Delete" asp-route-id="@Model.ID" class="btn btn-danger btn-sm"
               onclick="return confirm('Bạn có chắc muốn xóa sản phẩm này?');">
                <i class="fas fa-trash-alt me-1"></i>Xóa
            </a>
            <a asp-action="Index" class="btn btn-outline-secondary btn-sm">
                <i class="fas fa-arrow-left me-1"></i>Quay lại
            </a>
        </div>
    </div>
</div>

<div class="row g-4">
    <!-- Product Image & Basic Info -->
    <div class="col-lg-4">
        <div class="card border-0 shadow-sm">
            <div class="position-relative">
                <img src="@(!string.IsNullOrEmpty(Model.ImagePath) ? Model.ImagePath : "/images/default-concession.jpg")"
                     alt="@Model.Name"
                     class="card-img-top"
                     style="height: 300px; object-fit: cover;"
                     onerror="this.src='/images/default-concession.jpg'" />

                <!-- Status Badge -->
                <div class="position-absolute top-0 start-0 m-3">
                    @if (!Model.IsAvailable)
                    {
                        <span class="badge bg-danger fs-6">
                            <i class="fas fa-times me-1"></i>Ngưng bán
                        </span>
                    }
                    else if (Model.StockQuantity <= 10)
                    {
                        <span class="badge bg-warning text-dark fs-6">
                            <i class="fas fa-exclamation-triangle me-1"></i>Sắp hết
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-success fs-6">
                            <i class="fas fa-check me-1"></i>Đang bán
                        </span>
                    }
                </div>

                <!-- Category Badge -->
                <div class="position-absolute top-0 end-0 m-3">
                    <span class="badge @GetCategoryBadgeClass(Model.Category) fs-6">
                        <i class="@GetCategoryIcon(Model.Category) me-1"></i>
                        @Model.Category
                    </span>
                </div>

                <!-- Stock Badge -->
                <div class="position-absolute bottom-0 end-0 m-3">
                    <span class="badge bg-dark fs-6">
                        <i class="fas fa-boxes me-1"></i>@Model.StockQuantity
                    </span>
                </div>
            </div>

            <div class="card-body p-4">
                <h4 class="card-title fw-bold mb-2">@Model.Name</h4>
                <div class="fs-2 fw-bold text-success mb-3">
                    @String.Format("{0:N0} ₫", Model.Price)
                </div>

                <!-- Quick Actions -->
                <div class="d-grid gap-2">
                    <button class="btn @(Model.IsAvailable ? "btn-outline-warning" : "btn-outline-success")"
                            onclick="toggleAvailability(@Model.ID, this)">
                        <i class="fas @(Model.IsAvailable ? "fa-pause" : "fa-play") me-2"></i>
                        @(Model.IsAvailable ? "Ngưng bán" : "Bắt đầu bán")
                    </button>
                    <button class="btn btn-outline-primary" onclick="showStockModal()">
                        <i class="fas fa-boxes me-2"></i>Cập nhật tồn kho
                    </button>
                </div>

                <!-- Product Stats -->
                <div class="row g-2 text-center mt-3">
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-primary mb-0" id="soldCount">@GetSoldQuantity()</h6>
                            <small class="text-muted">Đã bán</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-warning mb-0" id="revenueAmount">@GetTotalRevenue()</h6>
                            <small class="text-muted">Doanh thu</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="bg-light rounded p-2">
                            <h6 class="text-info mb-0" id="daysActive">@GetDaysActive()</h6>
                            <small class="text-muted">Ngày bán</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Information -->
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white border-bottom py-3">
                <h5 class="card-title mb-0 fw-semibold">
                    <i class="fas fa-info-circle text-info me-2"></i>Thông tin sản phẩm
                </h5>
            </div>
            <div class="card-body p-4">
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-tag text-primary me-2"></i>
                                <strong>ID Sản phẩm</strong>
                            </div>
                            <div class="text-muted">#@Model.ID</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-layer-group text-success me-2"></i>
                                <strong>Danh mục</strong>
                            </div>
                            <div class="text-muted">@Model.Category</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-money-bill-wave text-warning me-2"></i>
                                <strong>Giá bán</strong>
                            </div>
                            <div class="text-muted">@String.Format("{0:N0} VND", Model.Price)</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-boxes text-info me-2"></i>
                                <strong>Tồn kho</strong>
                            </div>
                            <div class="text-muted">
                                @Model.StockQuantity sản phẩm
                                @if (Model.StockQuantity <= 10)
                                {
                                    <span class="badge bg-warning text-dark ms-2">Sắp hết</span>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-calendar-plus text-secondary me-2"></i>
                                <strong>Ngày tạo</strong>
                            </div>
                            <div class="text-muted">@Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="border rounded p-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-toggle-on text-success me-2"></i>
                                <strong>Trạng thái</strong>
                            </div>
                            <div class="text-muted">
                                <span class="badge @(Model.IsAvailable ? "bg-success" : "bg-danger")">
                                    @(Model.IsAvailable ? "Đang bán" : "Ngưng bán")
                                </span>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <div class="col-12">
                            <div class="border rounded p-3">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="fas fa-align-left text-dark me-2"></i>
                                    <strong>Mô tả</strong>
                                </div>
                                <div class="text-muted">@Model.Description</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sales Analytics -->
        <div class="card border-0 shadow-sm mt-4">
            <div class="card-header bg-white border-bottom py-3">
                <h5 class="card-title mb-0 fw-semibold">
                    <i class="fas fa-chart-line text-success me-2"></i>Phân tích doanh số
                </h5>
            </div>
            <div class="card-body p-4">
                <div class="row g-3">
                    <div class="col-md-3">
                        <div class="bg-light rounded p-3 text-center">
                            <i class="fas fa-shopping-cart text-primary fs-3 mb-2"></i>
                            <div class="fw-bold" id="totalOrders">@GetTotalOrders()</div>
                            <small class="text-muted">Lượt mua</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="bg-light rounded p-3 text-center">
                            <i class="fas fa-chart-bar text-success fs-3 mb-2"></i>
                            <div class="fw-bold" id="averageQuantity">@GetAverageQuantity()</div>
                            <small class="text-muted">TB/đơn hàng</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="bg-light rounded p-3 text-center">
                            <i class="fas fa-star text-warning fs-3 mb-2"></i>
                            <div class="fw-bold" id="rating">@GetRating()</div>
                            <small class="text-muted">Đánh giá</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="bg-light rounded p-3 text-center">
                            <i class="fas fa-percentage text-info fs-3 mb-2"></i>
                            <div class="fw-bold" id="popularityScore">@GetPopularityScore()</div>
                            <small class="text-muted">Độ phổ biến</small>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <h6 class="fw-bold mb-3">Lịch sử giá bán</h6>
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker bg-success"></div>
                            <div class="timeline-content">
                                <h6 class="mb-1">Ra mắt sản phẩm</h6>
                                <p class="text-muted mb-1">@Model.CreatedAt.ToString("dd/MM/yyyy")</p>
                                <small class="text-muted">Giá khởi điểm: @String.Format("{0:N0} ₫", Model.Price)</small>
                            </div>
                        </div>
                        @if (GetDaysActive() >= 30)
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-info"></div>
                                <div class="timeline-content">
                                    <h6 class="mb-1">Đánh giá sau 1 tháng</h6>
                                    <p class="text-muted mb-1">@Model.CreatedAt.AddDays(30).ToString("dd/MM/yyyy")</p>
                                    <small class="text-muted">Sản phẩm ổn định trên thị trường</small>
                                </div>
                            </div>
                        }
                        @if (GetSoldQuantity() >= 100)
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-warning"></div>
                                <div class="timeline-content">
                                    <h6 class="mb-1">Mốc 100 sản phẩm</h6>
                                    <p class="text-muted mb-1">Đã đạt được</p>
                                    <small class="text-muted">Sản phẩm bán chạy</small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Orders -->
        <div class="card border-0 shadow-sm mt-4">
            <div class="card-header bg-white border-bottom py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0 fw-semibold">
                        <i class="fas fa-receipt text-primary me-2"></i>Đơn hàng gần đây
                    </h5>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-success btn-sm" onclick="exportOrderData()">
                            <i class="fas fa-download me-1"></i>Xuất Excel
                        </button>
                        <button class="btn btn-outline-primary btn-sm" onclick="refreshOrderList()">
                            <i class="fas fa-sync-alt me-1"></i>Làm mới
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div id="orders-loading" class="text-center py-4" style="display: none;">
                    <i class="fas fa-spinner fa-spin text-primary fs-4"></i>
                    <p class="mt-2 text-muted">Đang tải danh sách đơn hàng...</p>
                </div>

                <div id="orders-list">
                    @if (GetRecentOrders().Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover" id="orders-table">
                                <thead class="table-light">
                                    <tr>
                                        <th>Mã đơn hàng</th>
                                        <th>Khách hàng</th>
                                        <th>Số lượng</th>
                                        <th>Tổng tiền</th>
                                        <th>Ngày mua</th>
                                        <th>Trạng thái</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in GetRecentOrders())
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge bg-primary">#@order.ID</span>
                                            </td>
                                            <td>
                                                <div class="fw-medium">@order.CustomerName</div>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@order.Quantity</span>
                                            </td>
                                            <td>
                                                <span class="fw-bold text-success">@order.TotalPrice</span>
                                            </td>
                                            <td>
                                                <small>@order.OrderDate</small>
                                            </td>
                                            <td>
                                                @Html.Raw(GetOrderStatusBadge(order.Status))
                                            </td>
                                            <td>
                                                <button class="btn btn-outline-info btn-sm" onclick="viewOrderDetails(@order.ID)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-receipt text-muted fs-1 mb-3"></i>
                            <h5 class="text-muted">Chưa có đơn hàng nào</h5>
                            <p class="text-muted mb-0">Đơn hàng sẽ hiển thị ở đây khi có khách hàng mua sản phẩm này.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Action Buttons -->
<div class="row mt-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>Quay lại danh sách
            </a>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-info" onclick="printProductInfo()">
                    <i class="fas fa-print me-2"></i>In thông tin
                </button>
                <a asp-action="Edit" asp-route-id="@Model.ID" class="btn btn-warning">
                    <i class="fas fa-edit me-2"></i>Chỉnh sửa
                </a>
                <button class="btn btn-outline-danger" onclick="toggleProductAvailability(@Model.ID, @Model.IsAvailable.ToString().ToLower())">
                    <i class="fas fa-@(Model.IsAvailable ? "pause" : "play") me-2"></i>
                    @(Model.IsAvailable ? "Ngưng bán" : "Bắt đầu bán")
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Stock Update Modal -->
<div class="modal fade" id="stockModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-boxes text-primary me-2"></i>Cập nhật tồn kho
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label fw-medium">Sản phẩm:</label>
                    <div class="fw-bold">@Model.Name</div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-medium">Tồn kho hiện tại:</label>
                    <div class="fw-bold text-info">@Model.StockQuantity sản phẩm</div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-medium">Thao tác:</label>
                    <div class="btn-group w-100" role="group">
                        <input type="radio" class="btn-check" name="stockAction" id="addStock" value="add" checked>
                        <label class="btn btn-outline-success" for="addStock">
                            <i class="fas fa-plus me-1"></i>Thêm
                        </label>

                        <input type="radio" class="btn-check" name="stockAction" id="subtractStock" value="subtract">
                        <label class="btn btn-outline-warning" for="subtractStock">
                            <i class="fas fa-minus me-1"></i>Trừ
                        </label>

                        <input type="radio" class="btn-check" name="stockAction" id="setStock" value="set">
                        <label class="btn btn-outline-info" for="setStock">
                            <i class="fas fa-equals me-1"></i>Đặt
                        </label>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="stockAmount" class="form-label fw-medium">Số lượng:</label>
                    <input type="number" class="form-control" id="stockAmount" min="1" placeholder="Nhập số lượng">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" onclick="updateStock()">
                    <i class="fas fa-save me-1"></i>Cập nhật
                </button>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Đồ uống" => "bg-info text-white",
            "Bắp rang" => "bg-warning text-dark",
            "Kẹo" => "bg-danger text-white",
            "Combo" => "bg-success text-white",
            "Đồ ăn nhanh" => "bg-primary text-white",
            _ => "bg-secondary text-white"
        };
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            "Đồ uống" => "fas fa-coffee",
            "Bắp rang" => "fas fa-seedling",
            "Kẹo" => "fas fa-candy-cane",
            "Combo" => "fas fa-box-open",
            "Đồ ăn nhanh" => "fas fa-hamburger",
            _ => "fas fa-utensils"
        };
    }

    private int GetSoldQuantity()
    {
        try
        {
            return Model.OrderItems?.Where(oi => oi.Order.Status == "COMPLETED").Sum(oi => oi.Quantity) ?? 0;
        }
        catch
        {
            return 0;
        }
    }

    private string GetTotalRevenue()
    {
        try
        {
            var revenue = Model.OrderItems?.Where(oi => oi.Order.Status == "COMPLETED").Sum(oi => oi.Quantity * oi.Price) ?? 0;
            return revenue.ToString("N0") + "k";
        }
        catch
        {
            return "0k";
        }
    }

    private int GetDaysActive()
    {
        return (DateTime.Now - Model.CreatedAt).Days;
    }

    private int GetTotalOrders()
    {
        try
        {
            return Model.OrderItems?.Where(oi => oi.Order.Status == "COMPLETED").Select(oi => oi.OrderID).Distinct().Count() ?? 0;
        }
        catch
        {
            return 0;
        }
    }

    private string GetAverageQuantity()
    {
        try
        {
            var orders = Model.OrderItems?.Where(oi => oi.Order.Status == "COMPLETED").ToList();
            if (orders?.Any() == true)
            {
                var avg = orders.Average(oi => oi.Quantity);
                return avg.ToString("F1");
            }
            return "0";
        }
        catch
        {
            return "0";
        }
    }

    private string GetRating()
    {
        // Placeholder for rating system
        var soldQty = GetSoldQuantity();
        if (soldQty >= 100) return "5.0";
        if (soldQty >= 50) return "4.5";
        if (soldQty >= 20) return "4.0";
        if (soldQty >= 10) return "3.5";
        return "N/A";
    }

    private string GetPopularityScore()
    {
        var soldQty = GetSoldQuantity();
        var daysActive = GetDaysActive();
        if (daysActive > 0)
        {
            var score = (soldQty * 100) / Math.Max(daysActive, 1);
            return score.ToString("F0") + "%";
        }
        return "0%";
    }

    private IEnumerable<dynamic> GetRecentOrders()
    {
        try
        {
            return Model.OrderItems?.Where(oi => oi.Order.Status == "COMPLETED")
                .OrderByDescending(oi => oi.Order.CreatedAt)
                .Take(10)
                .Select(oi => new
                {
                    ID = oi.OrderID,
                    CustomerName = oi.Order.User?.FullName ?? "Khách hàng",
                    Quantity = oi.Quantity,
                    TotalPrice = (oi.Quantity * oi.Price).ToString("N0") + " ₫",
                    OrderDate = oi.Order.CreatedAt.ToString("dd/MM/yyyy HH:mm"),
                    Status = oi.Order.Status
                }) ?? new List<dynamic>();
        }
        catch
        {
            return new List<dynamic>();
        }
    }

    private string GetOrderStatusBadge(string status)
    {
        return status?.ToUpper() switch
        {
            "COMPLETED" => "<span class=\"badge bg-success\">Hoàn thành</span>",
            "PENDING" => "<span class=\"badge bg-warning text-dark\">Chờ xử lý</span>",
            "CANCELLED" => "<span class=\"badge bg-danger\">Đã hủy</span>",
            _ => "<span class=\"badge bg-secondary\">Không rõ</span>"
        };
    }
}

<style>
    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1) !important;
        }

    .border:hover {
        border-color: #0d6efd !important;
        transform: translateY(-1px);
        transition: all 0.3s ease;
    }

    .timeline {
        position: relative;
        padding-left: 2rem;
    }

        .timeline::before {
            content: '';
            position: absolute;
            left: 0.75rem;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #dee2e6;
        }

    .timeline-item {
        position: relative;
        margin-bottom: 2rem;
    }

    .timeline-marker {
        position: absolute;
        left: -2rem;
        top: 0.25rem;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
        border: 3px solid #fff;
        box-shadow: 0 0 0 3px #dee2e6;
    }

    .timeline-content {
        padding-left: 1rem;
    }

    .bg-light:hover {
        background-color: #e9ecef !important;
        transform: translateY(-1px);
        transition: all 0.3s ease;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
    }

    .table td {
        vertical-align: middle;
    }

 

    {
        flex-direction: column;
        gap: 1rem;
    }

    .d-flex.justify-content-between .d-flex {
        justify-content: center;
    }

    .timeline {
        padding-left: 1rem;
    }

    .timeline-marker {
        left: -1rem;
    }

    }


    {
        display: none !important;
    }

    .card {
        border: 1px solid #000 !important;
        box-shadow: none !important;
    }

    }
</style>

@section Scripts {
    <script>
        async function toggleAvailability(concessionId, button) {
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
            button.disabled = true;

            try {
                const response = await fetch('@Url.Action("ToggleAvailability", "AdminConcession")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({ concessionId: concessionId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    button.innerHTML = originalText;
                    showToast(result.message || 'Có lỗi xảy ra', 'error');
                }
            } catch (error) {
                button.innerHTML = originalText;
                showToast('Có lỗi xảy ra khi cập nhật trạng thái', 'error');
                console.error('Error:', error);
            } finally {
                button.disabled = false;
            }
        }

        async function toggleProductAvailability(concessionId, currentStatus) {
            const action = currentStatus ? 'ngưng bán' : 'bắt đầu bán';

            if (!confirm(`Bạn có chắc muốn ${action} sản phẩm này?`)) {
                return;
            }

            try {
                const response = await fetch('@Url.Action("ToggleAvailability", "AdminConcession")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({ concessionId: concessionId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Có lỗi xảy ra', 'error');
                }
            } catch (error) {
                showToast('Có lỗi xảy ra khi cập nhật trạng thái', 'error');
                console.error('Error:', error);
            }
        }

        function showStockModal() {
            new bootstrap.Modal(document.getElementById('stockModal')).show();
        }

        async function updateStock() {
            const action = document.querySelector('input[name="stockAction"]:checked').value;
            const amount = parseInt(document.getElementById('stockAmount').value);
            const currentStock = @Model.StockQuantity;

            if (!amount || amount <= 0) {
                alert('Vui lòng nhập số lượng hợp lệ!');
                return;
            }

            let newStock = currentStock;

            switch(action) {
                case 'add':
                    newStock = currentStock + amount;
                    break;
                case 'subtract':
                    newStock = Math.max(0, currentStock - amount);
                    break;
                case 'set':
                    newStock = amount;
                    break;
            }

            try {
                const response = await fetch('@Url.Action("UpdateStock", "AdminConcession")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({
                        concessionId: @Model.ID,
                        newStock: newStock
                    })
                });

                const result = await response.json();

                if (result.success) {
                    bootstrap.Modal.getInstance(document.getElementById('stockModal')).hide();
                    showToast(result.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(result.message || 'Có lỗi xảy ra', 'error');
                }
            } catch (error) {
                showToast('Có lỗi xảy ra khi cập nhật tồn kho', 'error');
                console.error('Error:', error);
            }
        }

        function refreshOrderList() {
            const loadingDiv = document.getElementById('orders-loading');
            const ordersList = document.getElementById('orders-list');

            loadingDiv.style.display = 'block';
            ordersList.style.display = 'none';

            // Simulate API call
            setTimeout(() => {
                loadingDiv.style.display = 'none';
                ordersList.style.display = 'block';
                showToast('Đã làm mới danh sách đơn hàng', 'success');
            }, 1000);
        }

        function exportOrderData() {
            // Implement export functionality
            showToast('Đang xuất dữ liệu...', 'info');
            // window.open(`/AdminConcession/ExportOrders?concessionId=${@Model.ID}`, '_blank');
        }

        function viewOrderDetails(orderId) {
            // Implement order details view
            alert('Xem chi tiết đơn hàng #' + orderId);
        }

        function printProductInfo() {
            window.print();
        }

        function showToast(message, type) {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'success' ? 'success' : type === 'info' ? 'info' : 'danger'} position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check' : type === 'info' ? 'info' : 'exclamation-triangle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close ms-2" onclick="this.parentElement.remove()"></button>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 3000);
        }

        // Animate numbers on page load
        document.addEventListener('DOMContentLoaded', function() {
            const counters = document.querySelectorAll('.bg-light .fw-bold:not([id])');

            counters.forEach(counter => {
                const target = parseInt(counter.textContent.replace(/[^\d]/g, ''));
                if (target && target > 0) {
                    let current = 0;
                    const increment = target / 20;
                    const timer = setInterval(() => {
                        current += increment;
                        if (current >= target) {
                            counter.textContent = target.toLocaleString('vi-VN');
                            clearInterval(timer);
                        } else {
                            counter.textContent = Math.floor(current).toLocaleString('vi-VN');
                        }
                    }, 50);
                }
            });
        });
    </script>
}

@{
    Html.AntiForgeryToken();
}